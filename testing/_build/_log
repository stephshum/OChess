### Starting build.
# Target: state_test.ml.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:ml, file:state_test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules state_test.ml > state_test.ml.depends
# Target: command.mli.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules command.mli > command.mli.depends
# Target: models.mli.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:mli, file:models.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules models.mli > models.mli.depends
# Target: models.cmi, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:mli, file:models.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o models.cmi models.mli
# Target: state.mli.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules state.mli > state.mli.depends
# Target: command.cmi, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o command.cmi command.mli
# Target: state.cmi, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o state.cmi state.mli
# Target: state_test.cmo, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:state_test.cmo, file:state_test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o state_test.cmo state_test.ml
# Target: command.ml.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules command.ml > command.ml.depends
# Target: models.ml.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:ml, file:models.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules models.ml > models.ml.depends
# Target: state.ml.depends, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -modules state.ml > state.ml.depends
# Target: command.cmo, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o command.cmo command.ml
# Target: models.cmo, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:models.cmo, file:models.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o models.cmo models.ml
# Target: state.cmo, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax -o state.cmo state.ml
# Target: state_test.byte, tags: { package(ANSITerminal), package(js_of_ocaml), package(js_of_ocaml.ocamlbuild), package(js_of_ocaml.syntax), package(oUnit), package(str), package(yojson), byte, dont_link_with, extension:byte, file:state_test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package oUnit -package yojson -package str -package ANSITerminal -package js_of_ocaml -package js_of_ocaml.ocamlbuild -package js_of_ocaml.syntax models.cmo command.cmo state.cmo state_test.cmo -o state_test.byte
# Compilation successful.
